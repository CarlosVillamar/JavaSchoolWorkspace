package gooogleCodeCollection;

import java.util.Scanner;

public class SavingTheUniverseAgain {
	
	/***
	 * In order to hack the robot  we must take into account 
	 * 
	 * 
	 */

	public static void main(String args[]) {
		Scanner scanner = new Scanner(System.in);
		System.out.println("Enter the number of times we will attempt to hack the robot:  ");
		int numOfEngagements = scanner.nextInt();

		// loop through the number of engagements
		for (int i = 1; i <= numOfEngagements; i++) {
			System.out.print("How much damage can our sheild sustain? ");
			long numberOfHacks = scanner.nextLong();

			System.out.println("Enter the hacking sequence you would like to try to reduce the damage? ");
			char[] hackSeq = scanner.next().toCharArray();

			// send a call to a method to hack the robot
			String result = HackAttempt(numberOfHacks, hackSeq);

			// print out results
			System.out.println(i + " engagment  will require  " + result  + " hacks");

		}
		scanner.close();
		System.exit(0);
	}

	public static String HackAttempt(long hackLength, char[] seq) {
		//Lets attempt to hack the robot's beam
		long hackCount = 0;

		if (hackLength < hackVerififaction('S', seq)) {
			return "Impossible";
		} else {

			if (hackVerififaction('C', seq) == seq.length || hackVerififaction('S', seq) == seq.length) {
				System.out.print("You cannot just charge the beam or shoot it ");
				return "0";
			} else {

				if (hackLength >= BeamStrength(seq)) {
					System.out.print("Denied not enough damage \n");
					return "0";

				} else {
					hackCount = hackAttack(hackLength, seq, 0);
				}
			}
		}
		return String.valueOf(hackCount);
	}

	private static long hackVerififaction(char hackCode, char[] seq) {
		// Check how many times our sequence returns a charge or shoot
		// operations depending on what gets passed in
		int codeCount = 0;
		for (int i = 0; i < seq.length; i++) {
			if (hackCode == seq[i]) {
				codeCount++;
			}
		}

		return codeCount;
	}

	private static long hackAttack(long numberOfHacks, char[] seq, long hack) {
		//Lets hack the robot and make sure we don't get caught
		 for(int shotAttempt =0; shotAttempt <seq.length; shotAttempt++) {
			 
			int chargeCheck = shotAttempt+1;
			System.out.println(shotAttempt);

			if (seq[shotAttempt] == 'C' & seq[chargeCheck] == 'S') {
				hack++;
				seq[shotAttempt] = 'S';
				seq[chargeCheck] = 'C';
				System.out.println("Swap occured " + shotAttempt + "  " );

				if (BeamStrength(seq)<=numberOfHacks) {
					System.out.println("You are cleared to engage!!!");
					return hack;
				} else {
					System.out.println("The  beam isnt strong enough!!! ");
					return hackAttack(numberOfHacks, seq, hack);
				}
			}
		}

		return hack;
	}

	private static long BeamStrength(char[] hackSeq) {
		//What is the damage of the beam after our hack

		long damage = 0;
		long strength = 1;

		for (int i = 0; i < hackSeq.length; i++) {
			if (hackSeq[i] == 'S') {
				damage = damage + strength;
				System.out.println("Current Beam Damage " + damage);
			}else if (hackSeq[i] == 'C') {
				strength = strength * 2;
				System.out.println("Current Beam Strength " + strength);
			}
		}
		return damage;

	}

}
