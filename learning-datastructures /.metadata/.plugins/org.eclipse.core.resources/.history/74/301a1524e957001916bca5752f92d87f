package practical.BST;

public class BST {

	private Node root;

	private Node insertNode(Node current, int key) {
		Node newNode = new Node(key);
		
		if (current == null) {
			current = newNode;
			return current;
		}

		if (key < current.key) {
			current.leftChild = insertNode(current.leftChild, key);
		}
		if(key > current.key){
			current.rightChild = insertNode(current.rightChild, key);

		}else {
			return current;
		}

		return current;
	}

	public void addFromRoot(int Key) {
		root = insertNode(root, Key);
	}

	private boolean searchForNodeRecursive(Node node, int Key) {
		Node current = node;
		if (current == null) {
			return false;
		}
		if (current.key == Key) {
			return true;
		}
		return Key < current.key ? searchForNodeRecursive(node.leftChild, Key)
				: searchForNodeRecursive(node.rightChild, Key);
	}

	public boolean searchForNode(int key) {
		return searchForNodeRecursive(root, key);

	}

	private Node deleteNode(Node current, int delVal) {
		
		if(current==null) {
			return null;
		}
		
		
		if(delVal == current.key) {
			//a node with no children
			if(current.leftChild == null && current.rightChild == null) {
				return null;
			}
			
			//a node with one child
			if(current.rightChild ==null) return current.leftChild;
			if(current.leftChild == null) return current.rightChild;
			
		}
		
		
		
		if(delVal < current.key) {
			current.leftChild = deleteNode(current.leftChild, delVal);
			return current;
		}else {
			current.rightChild = deleteNode(current.rightChild, delVal);
			return current;
		}
		
	}
}
